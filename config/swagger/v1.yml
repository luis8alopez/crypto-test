swagger: "2.0"
info:
  description: "This is a backend server that exposes some cryptocurrencies services for the technical challenge for Wolox."
  version: "1.0.0"
  title: "Swagger cryptoChallenge"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
basePath: "/api/"
tags:
- name: "User"
  description: "Everything related to users and login"
- name: "cryptoPerUser"
  description: "Everything related to logged in users"
schemes:
- "http"
paths:
  users/login:
    post:
      tags:
      - "User"
      summary: "Login"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login object to obtain JWT"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "500":
          description: "Internal server error"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/responseToken"
  users:
    post:
      tags:
      - "User"
      summary: "Creates a new user"
      description: "Creates a new user"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Creates a new user"
        required: true
        schema:
          $ref: "#/definitions/newUser"
      responses:
        "404":
          description: "Not able to create user or user already exists"
        "400":
          description: "Bad request"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/responseCreateUser"
  crypto/:username/coins:
    get:
      tags:
      - "cryptoPerUser"
      summary: "Returns your top N of cryptocurrencies"
      description: "Returns the top N of cryptocurrencies that you have followed"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: 
      - name: "limit"
        in: "query"
        type: integer
        required: true
      responses:
        "200":
          description: "Operation successful"
          schema:
            $ref: "#/definitions/topCrypto"
        "403":
          description: "You don't have permission to access this resource"
        "500":
          description: "Unable to perform database action"
        "400":
          description: "Unable to perform operation"
      security:
      - Authorization: []
    post:
      tags:
      - "cryptoPerUser"
      summary: "Adds a new coin for follow up"
      operationId: "postcoin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Adds a new coin for follow up"
        required: true
        schema:
          $ref: "#/definitions/newCoin"
      responses:
        "200":
          description: "Operation successful"
          schema:
            $ref: "#/definitions/coinAdded"
        "403":
          description: "You don't have permission to access this resource"
        "500":
          description: "There was a problem accessing the database"
        "400":
          description: "You already follow this coin"
      security:
      - Authorization: []
      
  crypto/coins:
    get:
      tags:
      - "cryptoPerUser"
      summary: "Returns all coins"
      description: "Returns all coins"
      operationId: "getAllCoins"
      produces:
      - "application/json"
      parameters: []
      headers:
        Access-Control-Allow-Origin: "*"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/getCoins"
        "400":
          description: "Bad request made to the API"
      security:
      - Authorization: []
securityDefinitions:
  Authorization:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  newCoin:
    type: "object"
    properties:
      coin:
        type: "string"
        description: "Id of a coin to follow"
  User:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  newUser:
    type: "object"
    required:
    - "name"
    - "lastname"
    - "username"
    - "password"
    - "preferredCoin"
    properties:
      name:
        type: "string"
      lastname:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      preferredCoin:
        type: "string"
        enum:
        - "usd"
        - "asr"
        - "eur"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  responseToken:
    type: "object"
    properties:
      message:
        type: "string"
      token:
        type: "string"
  responseCreateUser:
    type: "object"
    properties:
      message:
        type: "string"
  topCrypto:
    type: "object"
    properties:
      message:
        type: "string"
      data:
        type: "array"
        xml:
          name: "data"
          wrapped: true
        items:
          $ref: "#/definitions/data"
  data:
    type: "object"
    properties:
      name:
        type: "string"
      symbol:
        type: "string"
      thumb:
        type: "string"
      ars:
        type: "integer"
        format: "int32"
      eur:
        type: "integer"
        format: "int32"
      usd:
        type: "integer"
        format: "int32"
      last_updated:
        type: "string"
    xml:
      name: "data"
  coinAdded:
    type: "object"
    properties:
      message:
        type: "string"
  allCoins:
    type: "object"
    properties:
      name:
        type: "string"
      symbol:
        type: "string"
      image:
        type: "string"
      current_price:
        type: "integer"
        format: "int32"
      last_updated:
        type: "string"
    xml:
      name: "allCoins"
  getCoins:
    type: "object"
    properties:
      message:
        type: "string"
      data:
        type: "array"
        xml:
          name: "allCoins"
          wrapped: true
        items:
          $ref: "#/definitions/allCoins"
  
  
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"